program
  : main_definition // P1
  | translation_unit main_definition // P3

translation_unit
  : struct_specifier // P4
  | function_definition // P3
  | translation_unit struct_specifier // P4
  | translation_unit function_definition // P3

/* Struct Declaration */

struct_specifier
  : STRUCT IDENTIFIER LCB declaration_list RCB EOS // P4

/* Function Definition */

function_definition
  : type_specifier IDENTIFIER LRB RRB compound_statement // P3
  | type_specifier IDENTIFIER LRB parameter_list RRB compound_statement // P3

/* Main Function */

main_definition
  : INT MAIN LRB RRB compound_statement // P1

/* Type Specifier */

type_specifier
  : VOID // P3
  | INT // P1
  | STRUCT IDENTIFIER // P4

/* Declaration List */

declaration_list
  : declaration // P1
  | declaration_list declaration // P1

declaration
  : type_specifier declarator_list EOS // P1

declarator_list
  : declarator // P1
  | declarator_list COMMA declarator // P1

declarator
  : declarator_arr // P1
  | OP_MUL declarator // P5

declarator_arr
  : IDENTIFIER // P1
  | declarator_arr LSB CONSTANT_INT RSB // P6

/* Parameter List */

parameter_list
  : parameter_declaration // P3
  | parameter_list COMMA parameter_declaration // P3

parameter_declaration
  : type_specifier declarator // P3

/* Statements */
compound_statement
  : LCB RCB // P1
  | LCB statement_list RCB // P1
  | LCB declaration_list statement_list RCB // P1

statement_list
  : statement // P1
  | statement_list statement // P1

statement
  : EOS // P1
  | LCB statement_list RCB // P1
  | assignment_expression EOS // P1
  | selection_statement // P2
  | iteration_statement // P2
  | procedure_call // P3
  | printf_call // P1
  | RETURN expression EOS // P1

/* Expressions */
assignment_expression
  : unary_expression OP_ASSIGN expression // P1

expression
  : logical_and_expression // P1
  | expression OP_OR logical_and_expression // P1

logical_and_expression
  : equality_expression // P1
  | logical_and_expression OP_AND equality_expression // P1

equality_expression
  : relational_expression // P1
  | equality_expression OP_EQ relational_expression // P1
  | equality_expression OP_NEQ relational_expression // P1

relational_expression
  : additive_expression
  | relational_expression OP_LT additive_expression // P1
  | relational_expression OP_GT additive_expression // P1
  | relational_expression OP_LTE additive_expression // P1
  | relational_expression OP_GTE additive_expression // P1

additive_expression
  : multiplicative_expression // P1
  | additive_expression OP_ADD multiplicative_expression // P1
  | additive_expression OP_SUB multiplicative_expression // P1

multiplicative_expression
  : unary_expression // P1
  | multiplicative_expression OP_MUL unary_expression // P1
  | multiplicative_expression OP_DIV unary_expression // P1

unary_expression
  : postfix_expression // P1
  | unary_operator unary_expression // P1

postfix_expression
  : primary_expression // P1
  | postfix_expression OP_INC // P1
  | IDENTIFIER LRB RRB // P3
  | IDENTIFIER LRB expression_list RRB // P3
  | postfix_expression OP_MEM IDENTIFIER // P4
  | postfix_expression OP_PTR IDENTIFIER // P5
  | postfix_expression LSB expression RSB // P6

primary_expression
  : IDENTIFIER // P1
  | CONSTANT_INT // P1
  | LRB expression RRB // P1

unary_operator
  : OP_SUB // P1
  | OP_NOT // P1
  | OP_ADDR // P5
  | OP_MUL // P5

/* Selection Statement */
selection_statement
  : IF LRB expression RRB statement ELSE statement // P2

/* Iteration Statement */
iteration_statement
  : WHILE LRB expression RRB statement // P2
  | FOR LRB assignment_expression EOS expression EOS assignment_expression RRB statement // P2

/* Expression List */
expression_list
  : expression // P1
  | expression_list COMMA expression // P1

/* Procedure Call */
procedure_call
  : IDENTIFIER LRB RRB EOS // P3
  | IDENTIFIER LRB expression_list RRB EOS // P3

/* Printf Call */
printf_call
  : PRINTF LRB CONSTANT_STR RRB EOS // P1
  | PRINTF LRB CONSTANT_STR COMMA expression_list RRB EOS // P1

